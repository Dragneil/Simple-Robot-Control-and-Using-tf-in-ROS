#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <turtlesim/Spawn.h>
//REFERENCE: http://wiki.ros.org/tf/Tutorials
//http://answers.ros.org/question/50113/transform-quaternion/
//http://wiki.ros.org/p2os-purdue/Tutorials/C%2B%2B%20Velocity%20Controller%20for%20P2OS%20Robots

int main(int argc, char** argv){

  ros::init(argc, argv, "listener2");

  ros::NodeHandle node;
ros::Duration(1.0).sleep();
 // ros::service::waitForService("spawn");
  //ros::ServiceClient add_turtle =
  //  node.serviceClient<turtlesim::Spawn>("spawn");
  //turtlesim::Spawn srv;
  //add_turtle.call(srv);

  ros::Publisher turtle_vel =
    node.advertise<geometry_msgs::Twist>("robot_1/cmd_vel", 10);

  tf::TransformListener listener;

  ros::Rate rate(2.0);

  while (node.ok()){
    tf::StampedTransform transform;
    try{
      ros::Time now = ros::Time::now();
    ros::Time past = now - ros::Duration(1.0);
    listener.waitForTransform("/robot_1", now, "/robot_0", past, "/world", ros::Duration(3));
    listener.lookupTransform("/robot_1", now, "/robot_0", past, "/world", transform);
  //    listener.waitForTransform("/robot_1", "/robot_0", ros::Time(0), ros::Duration(1) );
  //    listener.lookupTransform("/robot_1", "/robot_0", ros::Time(0), transform);
    }
    catch (tf::TransformException &ex) {
      ROS_ERROR("%s",ex.what());
      //ros::Duration(1.0).sleep();
      continue;
    }

    geometry_msgs::Twist vel_msg;
    vel_msg.angular.z = 4.0 * atan2(transform.getOrigin().y(),
                                    transform.getOrigin().x());
    vel_msg.linear.x = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +
                                  pow(transform.getOrigin().y(), 2));
    turtle_vel.publish(vel_msg);

    rate.sleep();
  }
  return 0;
};
